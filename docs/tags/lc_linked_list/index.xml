<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lc_linked_list on Siwei&#39;s Blog</title>
    <link>https://blog.siwei.dev/tags/lc_linked_list/</link>
    <description>Recent content in lc_linked_list on Siwei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Sep 2021 00:00:00 -0400</lastBuildDate><atom:link href="https://blog.siwei.dev/tags/lc_linked_list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2 Add Two Numbers</title>
      <link>https://blog.siwei.dev/leetcode/2-add-two-numbers/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/2-add-two-numbers/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>19 Remove Nth Node From End of List</title>
      <link>https://blog.siwei.dev/leetcode/19-remove-nth-node-from-end-of-list/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/19-remove-nth-node-from-end-of-list/</guid>
      <description>Given the head of a linked list, remove the nth node from the end of the list and return its head.
Example 1:
1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; (4) -&amp;gt; 5 1 -&amp;gt; 2 -&amp;gt; 3 --------&amp;gt; 5 Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2:
Input: head = [1], n = 1 Output: [] Example 3:
Input: head = [1,2], n = 1 Output: [1] Constraints:</description>
    </item>
    
    <item>
      <title>21 Merge Two Sorted Lists</title>
      <link>https://blog.siwei.dev/leetcode/21-merge-two-sorted-lists/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/21-merge-two-sorted-lists/</guid>
      <description>Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.
Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2:
Input: l1 = [], l2 = [] Output: [] Example 3:
Input: l1 = [], l2 = [0] Output: [0] Constraints:
 The number of nodes in both lists is in the range [0, 50].</description>
    </item>
    
    <item>
      <title>23 Merge k Sorted Lists</title>
      <link>https://blog.siwei.dev/leetcode/23-merge-k-sorted-lists/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/23-merge-k-sorted-lists/</guid>
      <description>You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.
Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] merging them into one sorted list: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 Example 2:
Input: lists = [] Output: [] Example 2:
Input: lists = [[]] Output: [] Constraints:
 k == lists.</description>
    </item>
    
    <item>
      <title>61 Rotate List</title>
      <link>https://blog.siwei.dev/leetcode/61-rotate-list/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/61-rotate-list/</guid>
      <description>Given the head of a linked list, rotate the list to the right by k places.
Example 1:
 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 rotate 1: 5 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 rotate 2: 4 -&amp;gt; 5 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 3 Input: head = [1,2,3,4,5], k = 2 Output: [4,5,1,2,3] Example 2:
 0 -&amp;gt; 1 -&amp;gt; 2 rotate 1: 2 -&amp;gt; 0 -&amp;gt; 1 rotate 2: 1 -&amp;gt; 2 -&amp;gt; 0 rotate 3: 0 -&amp;gt; 1 -&amp;gt; 2 rotate 4: 2 -&amp;gt; 0 -&amp;gt; 1 Input: head = [0,1,2], k = 4 Output: [2,0,1] Constraints:</description>
    </item>
    
    <item>
      <title>146 LRU Cache</title>
      <link>https://blog.siwei.dev/leetcode/146-lru-cache/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/146-lru-cache/</guid>
      <description>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
Implement the LRUCache class:
 LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.</description>
    </item>
    
    <item>
      <title>876 Middle of the Linked List</title>
      <link>https://blog.siwei.dev/leetcode/876-middle-of-the-linked-list/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/876-middle-of-the-linked-list/</guid>
      <description>Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
Example 1:
1 -&amp;gt; 2 -&amp;gt; (3) -&amp;gt; 4 -&amp;gt; 5 Input: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3. Example 2:
1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; (4) -&amp;gt; 5 -&amp;gt; 6 Input: head = [1,2,3,4,5,6] Output: [4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.</description>
    </item>
    
  </channel>
</rss>
