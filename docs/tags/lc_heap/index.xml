<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lc_heap on Siwei&#39;s Blog</title>
    <link>https://blog.siwei.dev/tags/lc_heap/</link>
    <description>Recent content in lc_heap on Siwei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Mar 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.siwei.dev/tags/lc_heap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>347 Top K Frequent Elements</title>
      <link>https://blog.siwei.dev/leetcode/347-top-k-frequent-elements/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/347-top-k-frequent-elements/</guid>
      <description>Given a non-empty array of integers, return the k most frequent elements.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2Output: [1,2]Example 2:
Input: nums = [1], k = 1Output: [1]Note:
 You may assume k is always valid, 1 ≤ k ≤ number of unique elements. Your algorithm&amp;rsquo;s time complexity must be better than O(n log n), where n is the array&amp;rsquo;s size. It&amp;rsquo;s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.</description>
    </item>
    
  </channel>
</rss>
