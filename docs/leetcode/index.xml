<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcodes on Siwei&#39;s Blog</title>
    <link>https://blog.siwei.dev/leetcode/</link>
    <description>Recent content in Leetcodes on Siwei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jun 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.siwei.dev/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1 Two Sum</title>
      <link>https://blog.siwei.dev/leetcode/1-two-sum/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1-two-sum/</guid>
      <description>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9Output: [0,1]Output: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
    </item>
    
    <item>
      <title>2 Add Two Numbers</title>
      <link>https://blog.siwei.dev/leetcode/2-add-two-numbers/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/2-add-two-numbers/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)Output: 7 -&amp;gt; 0 -&amp;gt; 8Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>3 Longest Substring Without Repeating Characters</title>
      <link>https://blog.siwei.dev/leetcode/3-longest-substring-without-repeating-characters/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/3-longest-substring-without-repeating-characters/</guid>
      <description>Given a string s, find the length of the longest substring without repeating characters.
Example 1:
Input: s = &amp;quot;abcabcbb&amp;quot;Output: 3Explanation: The answer is &amp;quot;abc&amp;quot;, with the length of 3.Example 2:
Input: s = &amp;quot;bbbbb&amp;quot;Output: 1Explanation: The answer is &amp;quot;b&amp;quot;, with the length of 1.Example 3:
Input: s = &amp;quot;pwwkew&amp;quot;Output: 3Explanation: The answer is &amp;quot;wke&amp;quot;, with the length of 3.Notice that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.</description>
    </item>
    
    <item>
      <title>4 Median of Two Sorted Arrays</title>
      <link>https://blog.siwei.dev/leetcode/4-median-of-two-sorted-arrays/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/4-median-of-two-sorted-arrays/</guid>
      <description>Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
Follow up: The overall run time complexity should be O(log (m+n)).
Example 1:
Input: nums1 = [1,3], nums2 = [2]Output: 2.00000Explanation: merged array = [1,2,3] and median is 2.Example 2:
Input: nums1 = [1,2], nums2 = [3,4]Output: 2.50000Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.</description>
    </item>
    
    <item>
      <title>5 Longest Palindromic Substring</title>
      <link>https://blog.siwei.dev/leetcode/5-longest-palindromic-substring/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/5-longest-palindromic-substring/</guid>
      <description>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example1:
Input: &amp;quot;babad&amp;quot;Output: &amp;quot;bab&amp;quot;Note: &amp;quot;aba&amp;quot; is also a valid answer.Example2:
Input: &amp;quot;cbbd&amp;quot;Output: &amp;quot;bb&amp;quot;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  func longestPalindrome(s string) string { if len(s) &amp;lt; 1 { return &amp;#34;&amp;#34; } start := 0 end := 0 for i := range s { len1 := expandAroundCenter(s, i, i) len2 := expandAroundCenter(s, i, i+1) lenMax := -1 if len1 &amp;gt; len2 { lenMax = len1 } else { lenMax = len2 } if lenMax &amp;gt; end-start+1 { start = i - (lenMax-1)/2 end = i + lenMax/2 } } return s[start : end+1] } func expandAroundCenter(s string, left int, right int) int { for left &amp;gt;= 0 &amp;amp;&amp;amp; right &amp;lt; len(s) &amp;amp;&amp;amp; s[left] == s[right] { left-- right++ } return right - left - 1 }   https://runtime.</description>
    </item>
    
    <item>
      <title>20 Valid Parentheses</title>
      <link>https://blog.siwei.dev/leetcode/20-valid-parentheses/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/20-valid-parentheses/</guid>
      <description>Given a string s containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.
An input string is valid if:
 Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.  Example 1:
Input: s = &amp;quot;()&amp;quot;Output: trueExample 2:
Input: s = &amp;quot;()[]{}&amp;quot;Output: trueExample 3:
Input: s = &amp;quot;(]&amp;quot;Output: falseExample 4:</description>
    </item>
    
    <item>
      <title>21 Merge Two Sorted Lists</title>
      <link>https://blog.siwei.dev/leetcode/21-merge-two-sorted-lists/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/21-merge-two-sorted-lists/</guid>
      <description>Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.
Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]Output: [1,1,2,3,4,4]Example 2:
Input: l1 = [], l2 = []Output: []Example 3:
Input: l1 = [], l2 = [0]Output: [0]Constraints:
 The number of nodes in both lists is in the range [0, 50].</description>
    </item>
    
    <item>
      <title>48 Rotate Image</title>
      <link>https://blog.siwei.dev/leetcode/48-rotate-image/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/48-rotate-image/</guid>
      <description>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Example 1:
1 2 3 7 4 14 5 6 =&amp;gt; 8 5 27 8 9 9 6 3Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]Output: [[7,4,1],[8,5,2],[9,6,3]]Example 2:</description>
    </item>
    
    <item>
      <title>50 Pow(x, n)</title>
      <link>https://blog.siwei.dev/leetcode/50-powx-n/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/50-powx-n/</guid>
      <description>Implement pow(x, n), which calculates x raised to the power n (i.e. xn).
Example 1:
Input: x = 2.00000, n = 10Output: 1024.00000Example 2:
Input: x = 2.10000, n = 3Output: 9.26100Example 3:
Input: x = 2.00000, n = -2Output: 0.25000Explanation: 2-2 = 1/22 = 1/4 = 0.25Constraints:
 -100.0 &amp;lt; x &amp;lt; 100.0 -231 &amp;lt;= n &amp;lt;= 231-1 -104 &amp;lt;= xn &amp;lt;= 104  1 2 3 4 5 6 7 8 9 10 11 12 13  func myPow(x float64, n int) float64 { if n == 0 { return 1 } if n &amp;lt; 0 { return myPow(1/x, -n) } result := myPow(x*x, n/2) if n % 2 == 1 { result *= x } return result }   </description>
    </item>
    
    <item>
      <title>55 Jump Game</title>
      <link>https://blog.siwei.dev/leetcode/55-jump-game/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/55-jump-game/</guid>
      <description>Given an array of non-negative integers nums, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Determine if you are able to reach the last index.
Example 1:
Input: nums = [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.Example 2:
Input: nums = [3,2,1,0,4]Output: falseExplanation: You will always arrive at index 3 no matter what.</description>
    </item>
    
    <item>
      <title>57 Insert Interval</title>
      <link>https://blog.siwei.dev/leetcode/57-insert-interval/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/57-insert-interval/</guid>
      <description>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]Output: [[1,5],[6,9]]Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]Output: [[1,2],[3,10],[12,16]]Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].Example 3:
Input: intervals = [], newInterval = [5,7]Output: [[5,7]]Example 4:</description>
    </item>
    
    <item>
      <title>100 Same Tree</title>
      <link>https://blog.siwei.dev/leetcode/100-same-tree/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/100-same-tree/</guid>
      <description>Given the roots of two binary trees p and q, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
Example 1:
 1 1/ \ / \2 3 2 3Input: p = [1,2,3], q = [1,2,3]Output: trueExample 2:
 1 1/ \2 2Input: p = [1,2], q = [1,null,2]Output: falseExample 3:</description>
    </item>
    
    <item>
      <title>101 Symmetric Tree</title>
      <link>https://blog.siwei.dev/leetcode/101-symmetric-tree/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/101-symmetric-tree/</guid>
      <description>Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
Example 1:
 1/ \2 2/ \ / \3 4 4 3Input: root = [1,2,2,3,4,4,3]Output: trueExample 2:
 1/ \2 2\ \3 3Input: root = [1,2,2,null,3,null,3]Output: falseConstraints:
 The number of nodes in the tree is in the range [1, 1000].</description>
    </item>
    
    <item>
      <title>103 Binary Tree Zigzag Level Order Traversal</title>
      <link>https://blog.siwei.dev/leetcode/103-binary-tree-zigzag-level-order-traversal/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/103-binary-tree-zigzag-level-order-traversal/</guid>
      <description>Given the root of a binary tree, return the zigzag level order traversal of its nodes&#39; values. (i.e., from left to right, then right to left for the next level and alternate between).
Example 1:
 3/ \9 20/ \15 7Input: root = [3,9,20,null,null,15,7]Output: [[3],[20,9],[15,7]]Example 2:
Input: root = [1]Output: [[1]]Example 3:
Input: root = []Output: []Constraints:
 The number of nodes in the tree is in the range [0, 2000].</description>
    </item>
    
    <item>
      <title>109 Convert Sorted List to Binary Search Tree</title>
      <link>https://blog.siwei.dev/leetcode/109-convert-sorted-list-to-binary-search-tree/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/109-convert-sorted-list-to-binary-search-tree/</guid>
      <description>Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Example 1:
-10 -&amp;gt; -3 -&amp;gt; 0 -&amp;gt; 5 -&amp;gt; 90 0/ \ / \-10 5 or -3 9\ \ / /-3 9 -10 5Input: head = [-10,-3,0,5,9]Output: [0,-3,9,-10,null,5]Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.</description>
    </item>
    
    <item>
      <title>113 Path Sum II</title>
      <link>https://blog.siwei.dev/leetcode/113-path-sum-ii/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/113-path-sum-ii/</guid>
      <description>Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path&amp;rsquo;s sum equals targetSum.
A leaf is a node with no children.
Example 1:
 5/ \4 8/ / \11 13 4/ \ / \7 2 5 1Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22Output: [[5,4,11,2],[5,8,4,5]]Example 2:
 1/ \2 3Input: root = [1,2,3], targetSum = 5Output: []Example 3:</description>
    </item>
    
    <item>
      <title>122 Best Time to Buy and Sell Stock II</title>
      <link>https://blog.siwei.dev/leetcode/122-best-time-to-buy-and-sell-stock-ii/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/122-best-time-to-buy-and-sell-stock-ii/</guid>
      <description>Say you have an array prices for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</description>
    </item>
    
    <item>
      <title>123 Best Time to Buy and Sell Stock III</title>
      <link>https://blog.siwei.dev/leetcode/123-best-time-to-buy-and-sell-stock-iii/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/123-best-time-to-buy-and-sell-stock-iii/</guid>
      <description>You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
Example 1:
Input: prices = [3,3,5,0,0,3,1,4]Output: 6Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.</description>
    </item>
    
    <item>
      <title>136 Single Number</title>
      <link>https://blog.siwei.dev/leetcode/136-single-number/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/136-single-number/</guid>
      <description>Given a non-empty array of integers, every element appears twice except for one. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Example 1:
Input: [2,2,1]Output: 1Example 2:
Input: [4,1,2,1,2]Output: 41 2 3 4 5 6 7 8 9 10 11 12 13 14  func singleNumber(nums []int) int { set := make(map[int]bool) for _, num := range nums { if _, ok := set[num]; ok { delete(set, num) } else { set[num] = true } } for num, _ := range set { return num } return -1 }   https://runtime.</description>
    </item>
    
    <item>
      <title>200 Number of Islands</title>
      <link>https://blog.siwei.dev/leetcode/200-number-of-islands/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/200-number-of-islands/</guid>
      <description>Given an m x n 2d grid map of &#39;1&#39;s (land) and &#39;0&#39;s (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Example 1:
Input: grid = [[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;],[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;],[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],[&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;]]Output: 1Example 2:
Input: grid = [[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],[&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],[&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;]]Output: 3Constraints:</description>
    </item>
    
    <item>
      <title>231 Power of Two</title>
      <link>https://blog.siwei.dev/leetcode/231-power-of-two/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/231-power-of-two/</guid>
      <description>Given an integer n, write a function to determine if it is a power of two.
Example 1:
Input: n = 1Output: trueExplanation: 20 = 1Example 2:
Input: n = 16Output: trueExplanation: 24 = 16Example 3:
Input: n = 3Output: falseExample 4:
Input: n = 4Output: trueExample 5:
Input: n = 5Output: falseConstraints:
 -231 &amp;lt;= n &amp;lt;= 231 - 1  1 2 3 4 5 6 7  func isPowerOfTwo(n int) bool { i := 1 for i &amp;lt; n { i *= 2 } return i == n }   https://runtime.</description>
    </item>
    
    <item>
      <title>242 Valid Anagram</title>
      <link>https://blog.siwei.dev/leetcode/242-valid-anagram/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/242-valid-anagram/</guid>
      <description>Given two strings s and t , write a function to determine if t is an anagram of s.
Example 1:
Input: s = &amp;quot;anagram&amp;quot;, t = &amp;quot;nagaram&amp;quot;Output: trueExample 2:
Input: s = &amp;quot;rat&amp;quot;, t = &amp;quot;car&amp;quot;Output: falseNote: You may assume the string contains only lowercase alphabets.
Follow up: What if the inputs contain unicode characters? How would you adapt your solution to such case?
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  func isAnagram(s string, t string) bool { if len(s) !</description>
    </item>
    
    <item>
      <title>247 H-Index</title>
      <link>https://blog.siwei.dev/leetcode/247-h-index/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/247-h-index/</guid>
      <description>Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher&amp;rsquo;s h-index.
According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.
If there are several possible values for h, the maximum one is taken as the h-index.</description>
    </item>
    
    <item>
      <title>344 Reverse String</title>
      <link>https://blog.siwei.dev/leetcode/344-reverse-string/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/344-reverse-string/</guid>
      <description>Write a function that reverses a string. The input string is given as an array of characters char[].
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
You may assume all the characters consist of printable ascii characters.
Example 1:
Input: [&amp;quot;h&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;o&amp;quot;]Output: [&amp;quot;o&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;h&amp;quot;]Example 2:
Input: [&amp;quot;H&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;h&amp;quot;]Output: [&amp;quot;h&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;H&amp;quot;]1 2 3 4 5 6 7 8 9 10 11  func reverseString(s []byte]) { i , j := 0, len(s) - 1 for i &amp;lt; j { temp := s[i] s[i] = s[j] i++ s[j] = temp j-- } fmt.</description>
    </item>
    
    <item>
      <title>347 Top K Frequent Elements</title>
      <link>https://blog.siwei.dev/leetcode/347-top-k-frequent-elements/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/347-top-k-frequent-elements/</guid>
      <description>Given a non-empty array of integers, return the k most frequent elements.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2Output: [1,2]Example 2:
Input: nums = [1], k = 1Output: [1]Note:
 You may assume k is always valid, 1 ≤ k ≤ number of unique elements. Your algorithm&amp;rsquo;s time complexity must be better than O(n log n), where n is the array&amp;rsquo;s size. It&amp;rsquo;s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.</description>
    </item>
    
    <item>
      <title>387 First Unique Character in a String</title>
      <link>https://blog.siwei.dev/leetcode/387-first-unique-character-in-a-string/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/387-first-unique-character-in-a-string/</guid>
      <description>Given a string, find the first non-repeating character in it and return its index. If it doesn&amp;rsquo;t exist, return -1.
Examples:
s = &amp;quot;leetcode&amp;quot;return 0.s = &amp;quot;loveleetcode&amp;quot;return 2.Note: You may assume the string contains only lowercase English letters.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  func firstUniqChar(s string) int { m := make(map[rune]int) for i, c := range s { _, has := m[c] if has { m[c] = -1 } else { m[c] = i } } const maxInt = int(^uint(0) &amp;gt;&amp;gt; 1) min := maxInt for _, i := range m { if i &amp;gt; -1 &amp;amp;&amp;amp; i &amp;lt; min { min = i } } if min == maxInt { return -1 } return min }   </description>
    </item>
    
    <item>
      <title>400 Nth Digit</title>
      <link>https://blog.siwei.dev/leetcode/400-nth-digit/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/400-nth-digit/</guid>
      <description>Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, &amp;hellip;
Note: n is positive and will fit within the range of a 32-bit signed integer (n &amp;lt; 231).
Example 1:
Input:3Output:3Example 2:
Input:11Output:0Explanation:The 11th digit of the sequence1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...is a 0, which is part of the number 10.</description>
    </item>
    
    <item>
      <title>405 Convert a Number to Hexadecimal</title>
      <link>https://blog.siwei.dev/leetcode/405-convert-a-number-to-hexadecimal/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/405-convert-a-number-to-hexadecimal/</guid>
      <description>Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.
Note:
All letters in hexadecimal (a-f) must be in lowercase. The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character &#39;0&#39;; otherwise, the first character in the hexadecimal string will not be the zero character. The given number is guaranteed to fit within the range of a 32-bit signed integer.</description>
    </item>
    
    <item>
      <title>412 Fizz Buzz</title>
      <link>https://blog.siwei.dev/leetcode/412-fizz-buzz/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/412-fizz-buzz/</guid>
      <description>Write a program that outputs the string representation of numbers from 1 to n.
But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.
Example:
n = 15,Return:[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;Fizz&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;Buzz&amp;quot;,&amp;quot;Fizz&amp;quot;,&amp;quot;7&amp;quot;,&amp;quot;8&amp;quot;,&amp;quot;Fizz&amp;quot;,&amp;quot;Buzz&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;Fizz&amp;quot;,&amp;quot;13&amp;quot;,&amp;quot;14&amp;quot;,&amp;quot;FizzBuzz&amp;quot;]1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  func fizzBuzz(n int) []string { var result []string for i := 1; i &amp;lt;= n; i++ { if i%3 == 0 &amp;amp;&amp;amp; i%5 == 0 { result = append(result, &amp;#34;FizzBuzz&amp;#34;) } else if i%3 == 0 { result = append(result, &amp;#34;Fizz&amp;#34;) } else if i%5 == 0 { result = append(result, &amp;#34;Buzz&amp;#34;) } else { result = append(result, strconv.</description>
    </item>
    
    <item>
      <title>476 Number Complement</title>
      <link>https://blog.siwei.dev/leetcode/476-number-complement/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/476-number-complement/</guid>
      <description>Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.
Example 1:
Input: num = 5Output: 2Explanation: The binary representation of 5 is 101 (no leading zero bits),and its complement is 010. So you need to output 2.Example 2:
Input: num = 1Output: 0Explanation: The binary representation of 1 is 1 (no leading zero bits),and its complement is 0.</description>
    </item>
    
    <item>
      <title>504 Base 7</title>
      <link>https://blog.siwei.dev/leetcode/504-base-7/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/504-base-7/</guid>
      <description>Given an integer num, return a string of its base 7 representation.
Example 1:
Input: num = 100Output: &amp;quot;202&amp;quot;Example 2:
Input: num = -7Output: &amp;quot;-10&amp;quot;Constraints:
 -107 &amp;lt;= num &amp;lt;= 107  1 2 3 4 5 6 7 8 9  func convertToBase7(num int) string { if num &amp;lt; 0 { return &amp;#34;-&amp;#34; + convertToBase7(-num) } if num &amp;lt; 7 { return strconv.Itoa(num) } return convertToBase7(num/7) + strconv.</description>
    </item>
    
    <item>
      <title>525 Contiguous Array</title>
      <link>https://blog.siwei.dev/leetcode/525-contiguous-array/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/525-contiguous-array/</guid>
      <description>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.
Example 1:
Input: [0,1]Output: 2Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.Example 2:
Input: [0,1,0]Output: 2Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.Note: The length of the given binary array will not exceed 50,000.</description>
    </item>
    
    <item>
      <title>1022 Sum of Root To Leaf Binary Numbers</title>
      <link>https://blog.siwei.dev/leetcode/1022-sum-of-root-to-leaf-binary-numbers/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1022-sum-of-root-to-leaf-binary-numbers/</guid>
      <description>You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit. For example, if the path is 0 -&amp;gt; 1 -&amp;gt; 1 -&amp;gt; 0 -&amp;gt; 1, then this could represent 01101 in binary, which is 13.
For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.</description>
    </item>
    
    <item>
      <title>1114 Print in Order</title>
      <link>https://blog.siwei.dev/leetcode/1114-print-in-order/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1114-print-in-order/</guid>
      <description>Suppose we have a class:
public class Foo {public void first() { print(&amp;quot;first&amp;quot;); }public void second() { print(&amp;quot;second&amp;quot;); }public void third() { print(&amp;quot;third&amp;quot;); }}The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().</description>
    </item>
    
    <item>
      <title>1325 Delete Leaves With a Given Value</title>
      <link>https://blog.siwei.dev/leetcode/1325-delete-leaves-with-a-given-value/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1325-delete-leaves-with-a-given-value/</guid>
      <description>Given a binary tree root and an integer target, delete all the leaf nodes with value target.
Note that once you delete a leaf node with value target, if it&amp;rsquo;s parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can&amp;rsquo;t).
Example 1:
 1 1 1/ \ / \ \2 3 =&amp;gt; (2) 3 =&amp;gt; 3/ / \ \ \(2) (2) 4 4 4Input: root = [1,2,3,2,null,2,4], target = 2Output: [1,null,3,null,4]Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).</description>
    </item>
    
    <item>
      <title>1413 Minimum Value to Get Positive Step by Step Sum</title>
      <link>https://blog.siwei.dev/leetcode/1413-minimum-value-to-get-positive-step-by-step-sum/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1413-minimum-value-to-get-positive-step-by-step-sum/</guid>
      <description>Given an array of integers nums, you start with an initial positive value startValue.
In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).
Return the minimum positive value of startValue such that the step by step sum is never less than 1.
Example 1:
Input: nums = [-3,2,-3,4,2]Output: 5Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.</description>
    </item>
    
  </channel>
</rss>
