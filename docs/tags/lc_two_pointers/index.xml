<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lc_two_pointers on Siwei&#39;s Blog</title>
    <link>https://blog.siwei.dev/tags/lc_two_pointers/</link>
    <description>Recent content in lc_two_pointers on Siwei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Sep 2021 00:00:00 -0400</lastBuildDate><atom:link href="https://blog.siwei.dev/tags/lc_two_pointers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>167 Two Sum II - Input array is sorted</title>
      <link>https://blog.siwei.dev/leetcode/167-two-sum-ii-input-array-is-sorted/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/167-two-sum-ii-input-array-is-sorted/</guid>
      <description>Given an array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.
Return the indices of the two numbers (1-indexed) as an integer array answer of size 2, where 1 &amp;lt;= answer[0] &amp;lt; answer[1] &amp;lt;= numbers.length.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Example 1:</description>
    </item>
    
    <item>
      <title>189 Rotate Array</title>
      <link>https://blog.siwei.dev/leetcode/189-rotate-array/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/189-rotate-array/</guid>
      <description>Given an array, rotate the array to the right by k steps, where k is non-negative.
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2:
Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] Constraints:</description>
    </item>
    
    <item>
      <title>283 Move Zeroes</title>
      <link>https://blog.siwei.dev/leetcode/283-move-zeroes/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/283-move-zeroes/</guid>
      <description>Given an integer array nums, move all 0&amp;rsquo;s to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.
Example 1:
Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Example 2:
Input: nums = [0] Output: [0] Constraints:
 1 &amp;lt;= nums.length &amp;lt;= 104 -231 &amp;lt;= nums[i] &amp;lt;= 231 - 1  Follow up: Could you minimize the total number of operations done?</description>
    </item>
    
    <item>
      <title>977 Squares of a Sorted Array</title>
      <link>https://blog.siwei.dev/leetcode/977-squares-of-a-sorted-array/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 -0400</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/977-squares-of-a-sorted-array/</guid>
      <description>Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
Example 1:
Input: nums = [-4,-1,0,3,10] Output: [0,1,9,16,100] Explanation: After squaring, the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100]. Example 2:
Input: nums = [-7,-3,2,3,11] Output: [4,9,9,49,121] Constraints:
 1 &amp;lt;= nums.length &amp;lt;= 104 -104 &amp;lt;= nums[i] &amp;lt;= 104 nums is sorted in non-decreasing order.  Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?</description>
    </item>
    
  </channel>
</rss>
