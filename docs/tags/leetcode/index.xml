<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Siwei&#39;s Blog</title>
    <link>https://blog.siwei.dev/tags/leetcode/</link>
    <description>Recent content in leetcode on Siwei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Sep 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.siwei.dev/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5 Longest Palindromic Substring</title>
      <link>https://blog.siwei.dev/leetcode/5-longest-palindromic-substring/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/5-longest-palindromic-substring/</guid>
      <description>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example1:
Input: &amp;quot;babad&amp;quot;Output: &amp;quot;bab&amp;quot;Note: &amp;quot;aba&amp;quot; is also a valid answer.Example2:
Input: &amp;quot;cbbd&amp;quot;Output: &amp;quot;bb&amp;quot;Golang1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  // longest-palindromic-substring package main import ( &amp;#34;fmt&amp;#34; ) func longestPalindrome(s string) string { if len(s) &amp;lt; 1 { return &amp;#34;&amp;#34; } start := 0 end := 0 for i := range s { len1 := expandAroundCenter(s, i, i) len2 := expandAroundCenter(s, i, i+1) lenMax := -1 if len1 &amp;gt; len2 { lenMax = len1 } else { lenMax = len2 } if lenMax &amp;gt; end-start+1 { start = i - (lenMax-1)/2 end = i + lenMax/2 } } return s[start : end+1] } func expandAroundCenter(s string, left int, right int) int { for left &amp;gt;= 0 &amp;amp;&amp;amp; right &amp;lt; len(s) &amp;amp;&amp;amp; s[left] == s[right] { left-- right++ } return right - left - 1 } func main() { fmt.</description>
    </item>
    
    <item>
      <title>1 Two Sum</title>
      <link>https://blog.siwei.dev/leetcode/1-two-sum/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1-two-sum/</guid>
      <description>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9Output: [0,1]Output: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
    </item>
    
    <item>
      <title>2 Add Two Numbers</title>
      <link>https://blog.siwei.dev/leetcode/2-add-two-numbers/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/2-add-two-numbers/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)Output: 7 -&amp;gt; 0 -&amp;gt; 8Explanation: 342 + 465 = 807.</description>
    </item>
    
  </channel>
</rss>
