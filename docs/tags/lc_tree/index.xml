<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lc_tree on Siwei&#39;s Blog</title>
    <link>https://blog.siwei.dev/tags/lc_tree/</link>
    <description>Recent content in lc_tree on Siwei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jun 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.siwei.dev/tags/lc_tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>100 Same Tree</title>
      <link>https://blog.siwei.dev/leetcode/100-same-tree/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/100-same-tree/</guid>
      <description>Given the roots of two binary trees p and q, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
Example 1:
 1 1/ \ / \2 3 2 3Input: p = [1,2,3], q = [1,2,3]Output: trueExample 2:
 1 1/ \2 2Input: p = [1,2], q = [1,null,2]Output: falseExample 3:</description>
    </item>
    
    <item>
      <title>101 Symmetric Tree</title>
      <link>https://blog.siwei.dev/leetcode/101-symmetric-tree/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/101-symmetric-tree/</guid>
      <description>Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
Example 1:
 1/ \2 2/ \ / \3 4 4 3Input: root = [1,2,2,3,4,4,3]Output: trueExample 2:
 1/ \2 2\ \3 3Input: root = [1,2,2,null,3,null,3]Output: falseConstraints:
 The number of nodes in the tree is in the range [1, 1000].</description>
    </item>
    
    <item>
      <title>103 Binary Tree Zigzag Level Order Traversal</title>
      <link>https://blog.siwei.dev/leetcode/103-binary-tree-zigzag-level-order-traversal/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/103-binary-tree-zigzag-level-order-traversal/</guid>
      <description>Given the root of a binary tree, return the zigzag level order traversal of its nodes&#39; values. (i.e., from left to right, then right to left for the next level and alternate between).
Example 1:
 3/ \9 20/ \15 7Input: root = [3,9,20,null,null,15,7]Output: [[3],[20,9],[15,7]]Example 2:
Input: root = [1]Output: [[1]]Example 3:
Input: root = []Output: []Constraints:
 The number of nodes in the tree is in the range [0, 2000].</description>
    </item>
    
    <item>
      <title>109 Convert Sorted List to Binary Search Tree</title>
      <link>https://blog.siwei.dev/leetcode/109-convert-sorted-list-to-binary-search-tree/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/109-convert-sorted-list-to-binary-search-tree/</guid>
      <description>Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Example 1:
-10 -&amp;gt; -3 -&amp;gt; 0 -&amp;gt; 5 -&amp;gt; 90 0/ \ / \-10 5 or -3 9\ \ / /-3 9 -10 5Input: head = [-10,-3,0,5,9]Output: [0,-3,9,-10,null,5]Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.</description>
    </item>
    
    <item>
      <title>113 Path Sum II</title>
      <link>https://blog.siwei.dev/leetcode/113-path-sum-ii/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/113-path-sum-ii/</guid>
      <description>Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path&amp;rsquo;s sum equals targetSum.
A leaf is a node with no children.
Example 1:
 5/ \4 8/ / \11 13 4/ \ / \7 2 5 1Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22Output: [[5,4,11,2],[5,8,4,5]]Example 2:
 1/ \2 3Input: root = [1,2,3], targetSum = 5Output: []Example 3:</description>
    </item>
    
    <item>
      <title>1022 Sum of Root To Leaf Binary Numbers</title>
      <link>https://blog.siwei.dev/leetcode/1022-sum-of-root-to-leaf-binary-numbers/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1022-sum-of-root-to-leaf-binary-numbers/</guid>
      <description>You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit. For example, if the path is 0 -&amp;gt; 1 -&amp;gt; 1 -&amp;gt; 0 -&amp;gt; 1, then this could represent 01101 in binary, which is 13.
For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.</description>
    </item>
    
    <item>
      <title>1325 Delete Leaves With a Given Value</title>
      <link>https://blog.siwei.dev/leetcode/1325-delete-leaves-with-a-given-value/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>https://blog.siwei.dev/leetcode/1325-delete-leaves-with-a-given-value/</guid>
      <description>Given a binary tree root and an integer target, delete all the leaf nodes with value target.
Note that once you delete a leaf node with value target, if it&amp;rsquo;s parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can&amp;rsquo;t).
Example 1:
 1 1 1/ \ / \ \2 3 =&amp;gt; (2) 3 =&amp;gt; 3/ / \ \ \(2) (2) 4 4 4Input: root = [1,2,3,2,null,2,4], target = 2Output: [1,null,3,null,4]Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).</description>
    </item>
    
  </channel>
</rss>
